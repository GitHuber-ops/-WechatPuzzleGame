{"version":3,"sources":["gameState.ts","components/CanvasWithImg.tsx","components/JigsawPiece.tsx","components/DraggablePiece.tsx","components/JigsawPieceList.tsx","components/DroppablePiece.tsx","components/JigsawPieceGrid.tsx","pages/Game.tsx","serviceWorker.ts","index.tsx"],"names":["gameState","imgSrc","sliceNum","pieceStates","this","Array","i","j","setIsDropped","undefined","isFinished","x","y","useState","isDropped","CanvasWithImg","props","canvasRef","image","React","createRef","Image","canvas","current","ctx","getContext","onload","drawFunc","src","console","error","ref","className","width","height","Component","JigsawPiece","GameStates","img","pieceWidth","drawImage","DraggablePiece","ishide","setIsHide","useIsDropped","isAndroid","test","navigator","userAgent","onDragStart","event","dataTransfer","setData","JSON","stringify","dropEffect","setTimeout","onDragEnd","draggable","join","JigsawPieceList","params","parameters","push","generateParameters","a","length","Math","floor","random","shuffle","pieceLength","pieces","map","key","styles","document","body","clientWidth","clientHeight","style","DroppablePiece","onDragOver","preventDefault","onDrop","dataJosn","getData","data","parse","JigsawPieceGrid","gridTemplateColumns","gridTemplateRows","Game","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.d8cb189b.chunk.js","sourcesContent":["import { useState } from \"react\";\n\ninterface PieceState {\n  setIsDropped: React.Dispatch<React.SetStateAction<boolean>> | undefined;\n  isFinished: boolean;\n}\n\nclass GameState {\n  imgSrc: string;\n  sliceNum: number;\n  pieceStates: Array<Array<PieceState>>;\n  constructor(imgSrc: string, sliceNum: number) {\n    this.imgSrc = imgSrc;\n    this.sliceNum = sliceNum;\n    this.pieceStates = new Array<Array<PieceState>>(sliceNum);\n    for (let i = 0; i < sliceNum; i++) {\n      this.pieceStates[i] = new Array<PieceState>(sliceNum);\n      for (let j = 0; j < sliceNum; j++) {\n        this.pieceStates[i][j] = {\n          setIsDropped: undefined,\n          isFinished: false,\n        };\n      }\n    }\n  }\n  useIsDropped(x: number, y: number) {\n    const [isDropped, setIsDropped] = useState(false);\n    this.pieceStates[x][y].setIsDropped = setIsDropped;\n    return isDropped;\n  }\n}\n\nconst gameState = new GameState(\"puzzle.png\", 4);\n\nexport default gameState;\n","import React from \"react\";\n\n\ninterface CanvasWithImgProps {\n    className?: string;\n    imgSrc: string;\n    width?: number;\n    height?: number;\n    canvasRef?: React.RefObject<HTMLCanvasElement>;\n    drawFunc: (ctx: CanvasRenderingContext2D, img: HTMLImageElement) => void;\n}\n\ninterface CanvasWithImgStates {\n\n}\n\nclass CanvasWithImg extends React.Component<CanvasWithImgProps, CanvasWithImgStates> {\n    canvasRef: React.RefObject<HTMLCanvasElement>;\n    image: HTMLImageElement;\n\n\n    constructor(props: CanvasWithImgProps) {\n        super(props);\n        if (props.canvasRef) {\n            this.canvasRef = props.canvasRef;\n        } else {\n            this.canvasRef = React.createRef();\n        }\n\n        this.image = new Image();\n    }\n\n    componentDidMount() {\n        const canvas = this.canvasRef.current;\n        if (canvas === null) {\n            console.error(\"CANVAS ERF IS NULL\");\n            return;\n        }\n        const ctx = canvas.getContext(\"2d\");\n        if (ctx === null) {\n            console.error(\"CANVAS UNSPPORT\");\n            return;\n        }\n        this.image.onload = () => {\n\n            this.props.drawFunc(ctx, this.image)\n        };\n        this.image.src = this.props.imgSrc;\n\n\n\n    }\n    componentDidUpdate() {\n\n    }\n    render() {\n\n        return (\n            <canvas\n                ref={this.canvasRef}\n                className={this.props.className}\n                width={this.props.width}\n                height={this.props.height}\n            >\n            </canvas>\n\n        )\n    }\n}\n\nexport default CanvasWithImg;","import React from \"react\";\n\nimport GameStates from \"../gameState\";\n\nimport CanvasWithImg from \"./CanvasWithImg\";\n\ninterface JigsawPieceProps {\n  className?: string;\n  x: number;\n  y: number;\n  canvasRef?: React.RefObject<HTMLCanvasElement>;\n}\n\nfunction JigsawPiece(props: JigsawPieceProps) {\n\n  const sliceNum = GameStates.sliceNum;\n\n  const draw = function (ctx: CanvasRenderingContext2D, img: HTMLImageElement) {\n\n    const pieceWidth = img.width / sliceNum;\n\n    ctx.drawImage(img,\n      props.x * pieceWidth, props.y * pieceWidth, img.width / sliceNum, img.height / sliceNum,\n      0, 0, 300, 300);\n\n  }\n\n  return (\n    <CanvasWithImg\n      className={props.className}\n      imgSrc={GameStates.imgSrc}\n      drawFunc={draw}\n      width={300}\n      height={300}\n      canvasRef={props.canvasRef}\n    />\n  );\n\n}\n\nexport default JigsawPiece;\n","import React, { useState } from 'react';\nimport JigsawPiece from \"./JigsawPiece\";\n\nimport \"./DraggablePiece.css\"\nimport gameState from '../gameState';\n\ninterface DraggablePieceProps {\n    x: number,\n    y: number,\n    className?: string\n}\n\nfunction DraggablePiece(props: DraggablePieceProps) {\n\n    const [ishide, setIsHide] = useState(false);\n\n    let isDropped = gameState.useIsDropped(props.x, props.y);\n\n    const isAndroid = /(android)/i.test(navigator.userAgent);\n\n    const handleDragStart = function (event: React.DragEvent<HTMLDivElement>) {\n        event.dataTransfer.setData(\"game/piece-coordinate\", JSON.stringify({\n            x: props.x,\n            y: props.y\n        }));\n        event.dataTransfer.dropEffect = \"move\";\n\n\n        if (!isAndroid) {\n            setTimeout(() => {\n                setIsHide(true);\n            }, 1)\n        }\n    }\n\n    const handleDragEnd = function (event: React.DragEvent<HTMLDivElement>) {\n\n        if (!isAndroid) {\n            setIsHide(false);\n        }\n    }\n\n    if (isDropped) {\n        return null;\n    }\n    else\n        return (\n            <div onDragStart={handleDragStart} onDragEnd={handleDragEnd} draggable=\"true\" className={props.className}>\n                <JigsawPiece\n                    x={props.x}\n                    y={props.y}\n                    className={[\"Draggable-piece\", ishide ? \"Draggable-piece-hide\" : undefined].join(\" \")}\n\n                />\n            </div>\n        )\n}\n\nexport default DraggablePiece;","import React from \"react\";\n\nimport GameStates from \"../gameState\";\n\nimport DraggablePiece from \"./DraggablePiece\";\n\nimport \"./JigsawPieceList.css\"\n\ninterface JigsawPieceListProps {\n  className?: string;\n}\n\ninterface JigsawPieceListParam {\n  x: number;\n  y: number;\n}\n\n\nfunction JigsawPieceList(props: JigsawPieceListProps) {\n  function generateParameters(sliceNum: number) {\n    let parameters: JigsawPieceListParam[] = [];\n    for (let i = 0; i < sliceNum; i++) {\n      for (let j = 0; j < sliceNum; j++) {\n        parameters.push({\n          x: i,\n          y: j\n        })\n      }\n    }\n    return parameters;\n  }\n  function shuffle(a: JigsawPieceListParam[]) {\n    for (let i = a.length - 1; i > 0; i--) {\n      const j = Math.floor(Math.random() * (i + 1));\n      [a[i], a[j]] = [a[j], a[i]];\n    }\n    return a;\n  }\n\n  const sliceNum = GameStates.sliceNum;\n\n  const params = generateParameters(sliceNum);\n  shuffle(params);\n  const pieces = params.map(\n    params => (\n\n      <DraggablePiece\n        x={params.x}\n        y={params.y}\n        key={JSON.stringify(params)}\n        className=\"Piece-list-piece\"\n      />\n    )\n  );\n\n  let styles: React.CSSProperties = {};\n\n  let pieceLength: string;\n  if (document.body.clientWidth / document.body.clientHeight > 2 / 3) {\n    pieceLength = `calc(60vh / ${sliceNum})`;\n  } else {\n    pieceLength = `calc(90vw / ${sliceNum})`;\n  }\n\n  styles.height = pieceLength;\n\n\n  return (\n    <div style={styles} className=\"Jigsaw-piece-list\">\n      {pieces}\n    </div>\n  );\n\n}\n\nexport default JigsawPieceList","import React, { useState } from 'react';\n\nimport JigsawPiece from \"./JigsawPiece\";\n\nimport \"./DroppablePiece.css\";\nimport gameState from '../gameState';\n\ninterface DroppablePieceProps {\n    x: number;\n    y: number;\n}\n\nfunction DroppablePiece(props: DroppablePieceProps) {\n\n    const [ishide, setIsHide] = useState(true);\n\n    const handleDragOver = function (event: React.DragEvent<HTMLDivElement>) {\n        event.preventDefault();\n    }\n\n    const handleDrop = function (event: React.DragEvent<HTMLDivElement>) {\n        const dataJosn = event.dataTransfer.getData(\"game/piece-coordinate\");\n        const data: {\n            x: number,\n            y: number\n        } = JSON.parse(dataJosn);\n        if (data.x === props.x && data.y === props.y) {\n            setIsHide(false);\n            const setIsDropped = gameState.pieceStates[props.x][props.y].setIsDropped;\n            if (setIsDropped) {\n                setIsDropped(true);\n            }\n\n        }\n    }\n\n    return (\n        <div\n            onDragOver={handleDragOver}\n            onDrop={handleDrop}\n            className={`Droppable-piece${ishide ? \" Droppable-piece-hide\" : \"\"}`}\n        >\n            <JigsawPiece\n                x={props.x}\n                y={props.y}\n                className=\"Droppable-piece-canvas\"\n            />\n        </div>\n    )\n\n}\n\nexport default DroppablePiece;","import React from \"react\";\n\nimport DroppablePiece from \"./DroppablePiece\";\n\nimport \"./JigsawPieceGrid.css\"\nimport gameState from \"../gameState\";\n\ninterface JigsawPieceGridProps {\n    className?: string;\n}\n\ninterface JigsawPieceGridParam {\n    x: number;\n    y: number;\n}\n\nfunction JigsawPieceGrid(props: JigsawPieceGridProps) {\n    function generateParameters(sliceNum: number) {\n        let parameters: JigsawPieceGridParam[] = [];\n        for (let i = 0; i < sliceNum; i++) {\n            for (let j = 0; j < sliceNum; j++) {\n                parameters.push({\n                    x: j,\n                    y: i\n                })\n            }\n        }\n        return parameters;\n    }\n\n    const sliceNum = gameState.sliceNum;\n\n    const params = generateParameters(sliceNum);\n\n\n\n    const pieces = params.map(\n        params => (\n            <DroppablePiece x={params.x} y={params.y} key={JSON.stringify(params)} />\n        )\n    );\n\n    const styles = {\n        gridTemplateColumns: `repeat(${sliceNum}, minmax(0, 1fr))`,\n        gridTemplateRows: `repeat(${sliceNum}, minmax(0, 1fr))`\n    }\n\n    return (\n        <div className=\"Jigsaw-piece-grid\" style={styles}>\n            {pieces}\n        </div>\n    );\n}\n\nexport default JigsawPieceGrid","import React from \"react\";\n\nimport JigsawPieceList from \"../components/JigsawPieceList\";\nimport JigsawPieceGrid from \"../components/JigsawPieceGrid\"\n\nimport \"./Game.css\";\n\ninterface GameProps {\n\n}\n\n\nfunction Game(props: GameProps) {\n  return (\n    <div className=\"App\" >\n      <div className=\"Game-title\">\n        拼图小游戏\n        </div>\n      <div className=\"Game-container\">\n        <JigsawPieceGrid />\n      </div>\n      <div className=\"Pieces-picker\">\n        <JigsawPieceList className=\"Jigsaw-piece\"></JigsawPieceList>\n      </div>\n    </div>\n\n  );\n}\n\n\nexport default Game;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Game from './pages/Game';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Game />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}